# -*- coding:utf-8
"""
@ author:   ysp
@ time：    2020/5/26 9:54
@ file:     2 作用域.py
@ IDE:      PyCharm
@ version:  python 3.8.3
"""

"""
在python解释器执行之后，会在内存中开辟一个空间，当遇到变量时，把变量名和值之间的关系记录，当遇到函数定义，只把函数名存入内存，不关心函数内部变量和逻辑，当函数调用和访问时，解释器会根据函数
内部声明的变量来开辟变量的内存空，随着函数执行完毕，函数内部变量占用的空间随函数执行完毕而被清空

命名空间：“存放名字与值的关系”的空间
全局命名空间：在运行伊始，创建的存储“变量名与值的关系”的空间
临时命名空间：函数的运行中开辟的临时的空间（局部命名空间）
内置名称空间：内置函数等拿来即用的特殊变量：input，print，list等等

1. 全局命名空间--> 我们直接在py文件中, 函数外声明的变量都属于全局命名空间
​2. 局部命名空间--> 在函数中声明的变量会放在局部命名空间
​3. 内置命名空间--> 存放python解释器为我们提供的名字, list, tuple, str, int这些都是内置命名空间

三个空间的加载顺序为：内置命名空间(程序运行伊始加载)->全局命名空间(程序运行中：从上到下加载)->局部命名空间(程序运行中：调用时才加载)
三个空间的取值顺序为：局部命名空间->全局命名空间->内置命名空间
"""

# 取值顺序就是引用一个变量，先从哪一个空间开始引用
# 全局命名空间引用变量，从全局名称空间引用，全局名称空间没有，从内置名称空间引用
# input = 666
# print(input)   # 666

# 局部名称空间引用一个变量，先从局部名称空间引用，局部名称空间如果没有，才会向全局名称空间引用，全局名称空间在没有，就会向内置名称空间引用
# input = 666
# print(input)   # 666
# def func():
#     input = 111
#     print(input)   # 111
# print(input)
# func()

"""
作用域就是作用范围, 按照生效范围来看分为全局作用域和局部作用域
全局作用域: 包含内置命名空间和全局命名空间. 在整个文件的任何位置都可以使用(遵循 从上到下逐⾏执行).
局部作用域: 在函数内部可以使用.

作用域命名空间：
全局作用域：全局命名空间+内置命名空间
局部作用域：局部命名空间
"""

# 内置函数globals(), locals()
# globals()：以字典形式返回全局作用域的所有变量对应关系
# locals()：以字典形式返回当前作用域的变量对应关系
# 全局作用域打印
# a = 2
# b = 3
# print(globals())
# print(locals())
# 局部作用域打印
a = 2
b = 3
def foo():
    c = 3
    print(globals())
    print(locals())   # {'c': 3}
foo()